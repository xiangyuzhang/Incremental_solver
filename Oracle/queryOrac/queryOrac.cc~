#include <map>
#include <string>
#include <vector>
#include <sstream>
#include <fstream>
#include <iostream>
#include <regex>

#include "queryOrac/queryOrac.h"
#include "incre/tools.h"
#include "incre/dict.h"

Oracle::Oracle(const char * ora, const char * PI, const char * PO)
{
    cout << "a Oracle is created" << endl;
    PI_path = PI;
    PO_path = PO;
    Orac_Path = ora;
}


void Oracle::genOracCNF()
{
    ifstream infile;
    vector<string> Vlines;
    load_gateTypeDict(gateTypeDict);

    cout << "reading data from " << Orac_Path << endl;

    Vlines = ReadByColon(Orac_Path);


    cnFile.push_back("c oracle circuit:\n");
    for(vector<string>::iterator iter = Vlines.begin(); iter != Vlines.end(); ++iter)
    {
        string line = *iter;
        strip_all(line, "\n");


        if((line.find("input") != string::npos) && (line.find("//") == string::npos))
        {
            cout << "Processing input (PI or CB)" << endl;
            // use regex to find input netname
            strip_all(line, "input");
            strip_all(line, " ");
            SplitString(line, PIs, ",");
            for(vector<string>::iterator pi = PIs.begin(); pi != PIs.end(); ++pi)
            {
                strip_all(*pi, "\\");
                strip_all(*pi, "[");
                strip_all(*pi, "]");
                varIndexDict.insert(std::pair<string, int>(*pi, varIndex));
                indexVarDict.insert(std::pair<int, string>(varIndex, *pi));
                pisIndex.push_back(varIndex);
                varIndex++;

            }
        }

        else if((line.find("output") != string::npos) && (line.find("//") == string::npos))
        {
            cout << "Processing output " << endl;
            strip_all(line, "output");
            strip_all(line, " ");
            SplitString(line, POs, ",");
            for(vector<string>::iterator po = POs.begin(); po != POs.end(); ++po)
            {
                strip_all(*po, "\\");
                strip_all(*po, "[");
                strip_all(*po, "]");
//              cout << *po << endl;
                posIndex.push_back(varIndex);
                varIndexDict.insert(std::pair<string, int>(*po, varIndex));
                indexVarDict.insert(std::pair<int, string>(varIndex, *po));
                varIndex++;
            }
        }

        else if((line.find("wire") != string::npos) && (line.find("//") == string::npos))
        {
            cout << "Processing wire" << endl;
            strip_all(line, "wire");
            strip_all(line, " ");
            SplitString(line, wires, ",");
            for(vector<string>::iterator w = wires.begin(); w != wires.end(); ++w)
            {
                strip_all(*w, "\\");
                strip_all(*w, "[");
                strip_all(*w, "]");
                strip_all(*w, "\\t");
//              cout << *w << endl;
                varIndexDict.insert(std::pair<string, int>(*w, varIndex));
                indexVarDict.insert(std::pair<int, string>(varIndex, *w));
                varIndex++;
            }
        }

        else if( (line != "") && (line.front() != '/') && (line.find("module") == string:: npos))
        {
            string gate;
            vector<string> gate_cnf;
//            cout << line << endl;
            if((line.find(".") != string::npos) && (line.find("(") != string::npos))
            {

                gate = find_gatetype(line);
                strip_all(gate," ");
                strip_all(gate,"\n");
                strip_all(gate,"\t");
            }
            else
            {
                cout << "verilog format is not acceptable!!!" << endl;
                exit(-1);
            }
            vector<string> netname;
            vector<int> lineIn;
            int lineOut;

            netname = find_netname(line);
            lineOut = varIndexDict[netname.back()];
            for(vector<string>::iterator iter = netname.begin(); iter != netname.end() - 1; ++iter)
            {
//                cout << varIndexDict[*iter] << endl;
                lineIn.push_back(varIndexDict[*iter]);
            }

            int caseNo = gateTypeDict[gate];
            gate_cnf = transGATE(caseNo, lineIn, lineOut);
            for(vector<string>::iterator iter = gate_cnf.begin(); iter != gate_cnf.end(); ++iter)
            {
//                cout << *iter << endl;
                cnFile.push_back(*iter);
            }
            gateCnt++;
        }
        varNum = varIndex - 1;
    }
    clauseNum = cnFile.size();
    string cmmtline1 = "c This file is generated by oracV2cnf\n";
    string cmmtline2 = "c Generated on " + get_localtime() + " \n";
    clauseNum += pisIndex.size();
    string firstLine = "p cnf " + tostring(varNum) + " " + tostring(clauseNum - 1)  + " \n";



    print_vector(cnFile, Orac_cnf);
}

void Oracle::process()
{
    genOracCNF();
    parse_PI();
    assign_PI();
    solve();

}

void Oracle::parse_PI() {
    cout << "reading from " << PI_path << endl;
    ifstream infile;
    infile.open(PI_path, ios::in);
    string first_line;
    string second_line;

    getline(infile, first_line);
    getline(infile, second_line);

    vector<string> name_temp;
    vector<string> value_temp;
    SplitString(first_line, name_temp, " ");
    SplitString(second_line, value_temp, " ");

    vector<string>::iterator value = value_temp.begin();
    for(vector<string>::iterator name = name_temp.begin(); name != name_temp.end(); ++name)
    {
    	PI_temp.insert(pair<int, string>(varIndexDict[*name], *value));
    	value++;
    }
}

void Oracle::assign_PI(){
	vector<int>::iterator position = pisIndex.begin();
	for(map<int, string>::iterator index = PI_temp.begin(); index != PI_temp.end(); ++index)
	{
		if(index->second == "1") PI_assignment_cnf.push_back(tostring(*position) + " 0\n");
		else if(index->second == "0") PI_assignment_cnf.push_back("-" + tostring(*position) + " 0\n");
		position++;
	}
	PI_assignment_cnf.insert(PI_assignment_cnf.begin(), "c this is assign_PI\n");
	cnFile += PI_assignment_cnf;
	print_vector(cnFile, "cnFile");
}


void Oracle::solve(){
	cout << " start solving" << endl;

}
